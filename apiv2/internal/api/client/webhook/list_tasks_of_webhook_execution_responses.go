// Code generated by go-swagger; DO NOT EDIT.

package webhook

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/simbou2000/goharbor-client/v5/apiv2/model"
)

// ListTasksOfWebhookExecutionReader is a Reader for the ListTasksOfWebhookExecution structure.
type ListTasksOfWebhookExecutionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListTasksOfWebhookExecutionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListTasksOfWebhookExecutionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewListTasksOfWebhookExecutionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewListTasksOfWebhookExecutionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewListTasksOfWebhookExecutionForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListTasksOfWebhookExecutionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewListTasksOfWebhookExecutionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListTasksOfWebhookExecutionOK creates a ListTasksOfWebhookExecutionOK with default headers values
func NewListTasksOfWebhookExecutionOK() *ListTasksOfWebhookExecutionOK {
	return &ListTasksOfWebhookExecutionOK{}
}

/*ListTasksOfWebhookExecutionOK handles this case with default header values.

List tasks of webhook executions success
*/
type ListTasksOfWebhookExecutionOK struct {
	/*Link refers to the previous page and next page
	 */
	Link string
	/*The total count of tasks
	 */
	XTotalCount int64

	Payload []*model.Task
}

func (o *ListTasksOfWebhookExecutionOK) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name_or_id}/webhook/policies/{webhook_policy_id}/executions/{execution_id}/tasks][%d] listTasksOfWebhookExecutionOK  %+v", 200, o.Payload)
}

func (o *ListTasksOfWebhookExecutionOK) GetPayload() []*model.Task {
	return o.Payload
}

func (o *ListTasksOfWebhookExecutionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Link
	o.Link = response.GetHeader("Link")

	// response header X-Total-Count
	xTotalCount, err := swag.ConvertInt64(response.GetHeader("X-Total-Count"))
	if err != nil {
		return errors.InvalidType("X-Total-Count", "header", "int64", response.GetHeader("X-Total-Count"))
	}
	o.XTotalCount = xTotalCount

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTasksOfWebhookExecutionBadRequest creates a ListTasksOfWebhookExecutionBadRequest with default headers values
func NewListTasksOfWebhookExecutionBadRequest() *ListTasksOfWebhookExecutionBadRequest {
	return &ListTasksOfWebhookExecutionBadRequest{}
}

/*ListTasksOfWebhookExecutionBadRequest handles this case with default header values.

Bad request
*/
type ListTasksOfWebhookExecutionBadRequest struct {
	/*The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *model.Errors
}

func (o *ListTasksOfWebhookExecutionBadRequest) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name_or_id}/webhook/policies/{webhook_policy_id}/executions/{execution_id}/tasks][%d] listTasksOfWebhookExecutionBadRequest  %+v", 400, o.Payload)
}

func (o *ListTasksOfWebhookExecutionBadRequest) GetPayload() *model.Errors {
	return o.Payload
}

func (o *ListTasksOfWebhookExecutionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(model.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTasksOfWebhookExecutionUnauthorized creates a ListTasksOfWebhookExecutionUnauthorized with default headers values
func NewListTasksOfWebhookExecutionUnauthorized() *ListTasksOfWebhookExecutionUnauthorized {
	return &ListTasksOfWebhookExecutionUnauthorized{}
}

/*ListTasksOfWebhookExecutionUnauthorized handles this case with default header values.

Unauthorized
*/
type ListTasksOfWebhookExecutionUnauthorized struct {
	/*The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *model.Errors
}

func (o *ListTasksOfWebhookExecutionUnauthorized) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name_or_id}/webhook/policies/{webhook_policy_id}/executions/{execution_id}/tasks][%d] listTasksOfWebhookExecutionUnauthorized  %+v", 401, o.Payload)
}

func (o *ListTasksOfWebhookExecutionUnauthorized) GetPayload() *model.Errors {
	return o.Payload
}

func (o *ListTasksOfWebhookExecutionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(model.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTasksOfWebhookExecutionForbidden creates a ListTasksOfWebhookExecutionForbidden with default headers values
func NewListTasksOfWebhookExecutionForbidden() *ListTasksOfWebhookExecutionForbidden {
	return &ListTasksOfWebhookExecutionForbidden{}
}

/*ListTasksOfWebhookExecutionForbidden handles this case with default header values.

Forbidden
*/
type ListTasksOfWebhookExecutionForbidden struct {
	/*The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *model.Errors
}

func (o *ListTasksOfWebhookExecutionForbidden) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name_or_id}/webhook/policies/{webhook_policy_id}/executions/{execution_id}/tasks][%d] listTasksOfWebhookExecutionForbidden  %+v", 403, o.Payload)
}

func (o *ListTasksOfWebhookExecutionForbidden) GetPayload() *model.Errors {
	return o.Payload
}

func (o *ListTasksOfWebhookExecutionForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(model.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTasksOfWebhookExecutionNotFound creates a ListTasksOfWebhookExecutionNotFound with default headers values
func NewListTasksOfWebhookExecutionNotFound() *ListTasksOfWebhookExecutionNotFound {
	return &ListTasksOfWebhookExecutionNotFound{}
}

/*ListTasksOfWebhookExecutionNotFound handles this case with default header values.

Not found
*/
type ListTasksOfWebhookExecutionNotFound struct {
	/*The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *model.Errors
}

func (o *ListTasksOfWebhookExecutionNotFound) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name_or_id}/webhook/policies/{webhook_policy_id}/executions/{execution_id}/tasks][%d] listTasksOfWebhookExecutionNotFound  %+v", 404, o.Payload)
}

func (o *ListTasksOfWebhookExecutionNotFound) GetPayload() *model.Errors {
	return o.Payload
}

func (o *ListTasksOfWebhookExecutionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(model.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListTasksOfWebhookExecutionInternalServerError creates a ListTasksOfWebhookExecutionInternalServerError with default headers values
func NewListTasksOfWebhookExecutionInternalServerError() *ListTasksOfWebhookExecutionInternalServerError {
	return &ListTasksOfWebhookExecutionInternalServerError{}
}

/*ListTasksOfWebhookExecutionInternalServerError handles this case with default header values.

Internal server error
*/
type ListTasksOfWebhookExecutionInternalServerError struct {
	/*The ID of the corresponding request for the response
	 */
	XRequestID string

	Payload *model.Errors
}

func (o *ListTasksOfWebhookExecutionInternalServerError) Error() string {
	return fmt.Sprintf("[GET /projects/{project_name_or_id}/webhook/policies/{webhook_policy_id}/executions/{execution_id}/tasks][%d] listTasksOfWebhookExecutionInternalServerError  %+v", 500, o.Payload)
}

func (o *ListTasksOfWebhookExecutionInternalServerError) GetPayload() *model.Errors {
	return o.Payload
}

func (o *ListTasksOfWebhookExecutionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header X-Request-Id
	o.XRequestID = response.GetHeader("X-Request-Id")

	o.Payload = new(model.Errors)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
